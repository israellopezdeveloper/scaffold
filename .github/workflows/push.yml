name: C Project CI Pipeline

on:
  push:
    branches: ["*"]

  workflow_dispatch:  # Permite ejecutar el workflow manualmente
    inputs:
      tag_name:
        description: 'Tag name'
        required: true
      release_name:
        description: 'Release name'
        required: true
  workflow_call: # Permite que este workflow sea llamado desde otros workflows
    inputs:
      after_prepare:
        description: 'Additional steps to run after prepare'
        required: false
        type: step[]
      before_tests:
        description: 'Additional steps to run before tests'
        required: false
        type: step[] # Define que puedes pasar un array de steps

jobs:
  prepare:
    name: Prepare environment
    runs-on: ubuntu-latest
    container:
      image: lopoeisr/node-pkg:1.0
      options: --privileged --user root
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        recursive: true
    - name: Preparing environment
      run: make prepare
    - name: After preparation
      if: ${{ inputs.after_prepare }}
      run: ${{ toJson(inputs.after_prepare) }}

  documentation:
    name: Create documentation
    runs-on: ubuntu-latest
    container:
      image: lopoeisr/ubuntu-make-doc:1.0
      options: --privileged --user root
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        recursive: true
    - name: create documentation
      run: |
        make docs && tar -czvf docs.tar.gz docs
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: |
          ./docs.tar.gz

  build-and-test-gcc:
    name: Build, Test and Package with GCC
    runs-on: ubuntu-latest
    needs: [prepare, documentation]
    container: 
      image: lopoeisr/ubuntu-make-gcc:1.0
      options: --privileged --user root
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        recursive: true
    - name: Prepare environment with make gtest
      run: make gtest
    - name: Download dependencies
      uses: actions/download-artifact@v3
      with:
        name: dependencies
    - name: Test preparation
      if: ${{ inputs.before_tests }}
      run: ${{ toJson(inputs.before_tests) }}
    - name: Run tests
      run: make tests
    - name: Create libraries
      run: make clean && make libs
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
    - name: Package libraries
      run: |
        tar -xf docs.tar.gz
        tar -czvf gcc-libs-n-docs.tar.gz libs docs
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: gcc-libs-n-docs
        path: gcc-libs-n-docs.tar.gz

  build-and-test-clang:
    name: Build, Test and Package with Clang
    runs-on: ubuntu-latest
    needs: [prepare, documentation]
    container:
      image: lopoeisr/ubuntu-make-clang:1.0
      options: --privileged --user root
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        recursive: true
    - name: Prepare environment with make gtest
      run: make gtest
    - name: Download dependencies
      uses: actions/download-artifact@v3
      with:
        name: dependencies
    - name: Test preparation
      if: ${{ inputs.before_tests }}
      run: ${{ toJson(inputs.before_tests) }}
    - name: Run tests
      run: make tests
    - name: Create libraries
      run: make clean && make libs
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
    - name: Package libraries
      run: |
        tar -xf docs.tar.gz
        tar -czvf clang-libs-n-docs.tar.gz libs docs
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: clang-libs-n-docs
        path: clang-libs-n-docs.tar.gz


