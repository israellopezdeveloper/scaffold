name: CI Main Branch

on:
  push:
    branches:
      - main

jobs:
  create-docs:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-doc:1.0'
      docker_options: '--privileged --user root'
      commands: |
        autoreconf --install
        mkdir build
        cd build
        ../configure --enable-doxygen-doc
        make doxygen-doc
        cd ..
        tar -czf documentation.tar.gz -C build/docs html -C latex refman.pdf
      artifact_path: 'documentation.tar.gz'
      artifact_name: 'documentation'

  create-coverage:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-gcc:1.0'
      docker_options: '--privileged --user root'
      commands: |
        ./runme --coverage --noclean --nocompile-commands
        tar -czf coverage.tar.gz -C build/coverage .
      artifact_path: 'coverage.tar.gz'
      artifact_name: 'coverage'

  test-gcc:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-gcc:1.0'
      docker_options: '--privileged --user root'
      commands: |
        ./runme --noclean --nocompile-commands
        tar -czf gcc-libs.tar.gz build/lib
      artifact_path: 'gcc-libs.tar.gz'
      artifact_name: 'gcc-libs'

  test-clang:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-clang:1.0'
      docker_options: '--privileged --user root'
      commands: |
        ./runme --noclean --nocompile-commands
        tar -czf clang-libs.tar.gz build/lib
      artifact_path: 'clang-libs.tar.gz'
      artifact_name: 'clang-libs'

  leak-gcc:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-gcc:1.0'
      docker_options: '--privileged --user root'
      commands: |
        ulimit -n 1024
        ./runme --leak --noclean --nocompile-commands

  leak-clang:
    uses: ./.github/workflows/reusable-job.yml
    with:
      docker_image: 'lopoeisr/ubuntu-make-clang:1.0'
      docker_options: '--privileged --user root'
      commands: |
        ulimit -n 1024
        ./runme --leak --noclean --nocompile-commands

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [create-docs,create-coverage,test-gcc,test-clang,leak-gcc,leak-clang]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        recursive: true
    - name: Get version number
      run: |
        autoreconf --install
        echo "VERSION=$(./configure --version | head -n1 | sed 's/.* \([0-9]\+\.[0-9]\+\.[0-9]\+\)/\1/')" >> $GITHUB_ENV
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          Release for ${{ env.VERSION }}
          - GCC compiled libraries
          - Clang compiled libraries
          - Documentation
          - Coverage
    - name: Download documentation
      uses: actions/download-artifact@v3
      with:
        name: documentation
    - name: Download Coverage
      uses: actions/download-artifact@v3
      with:
        name: coverage
    - name: Download Clang libs
      uses: actions/download-artifact@v3
      with:
        name: clang-libs
    - name: Download GCC libs
      uses: actions/download-artifact@v3
      with:
        name: gcc-libs
    - name: Upload GCC libraries to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gcc-libs.tar.gz
        asset_name: gcc-libs.tar.gz
        asset_content_type: application/gzip
    - name: Upload Clang libraries to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./clang-libs.tar.gz
        asset_name: clang-libs.tar.gz
        asset_content_type: application/gzip
    - name: Upload documentation to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./documentation.tar.gz
        asset_name: documentation.tar.gz
        asset_content_type: application/gzip
    - name: Upload coverage to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./coverage.tar.gz
        asset_name: coverage.tar.gz
        asset_content_type: application/gzip

