#!/bin/bash

# Variables iniciales
technologies=""
name_spanish=""
desc_spanish=""
name_english=""
desc_english=""
name_chinese=""
desc_chinese=""
logo_path=""

# Función para mostrar ayuda
function show_help {
	echo "Uso: $0 [opciones]"
	echo ""
	echo "Opciones:"
	echo "  -t                  Lista de tecnologías separadas por comas."
	echo "  --name-spanish      Nombre en español."
	echo "  --desc-spanish      Descripción en español."
	echo "  --name-english      Nombre en inglés."
	echo "  --desc-english      Descripción en inglés."
	echo "  --name-chinese      Nombre en chino."
	echo "  --desc-chinese      Descripción en chino."
	echo "  -l                  Ruta a una imagen para usar como logo."
}

# Parseo de parámetros
while [[ "$#" -gt 0 ]]; do
	case $1 in
	-t)
		technologies="$2"
		shift
		;;
	--name-spanish)
		name_spanish="$2"
		shift
		;;
	--desc-spanish)
		desc_spanish="$2"
		shift
		;;
	--name-english)
		name_english="$2"
		shift
		;;
	--desc-english)
		desc_english="$2"
		shift
		;;
	--name-chinese)
		name_chinese="$2"
		shift
		;;
	--desc-chinese)
		desc_chinese="$2"
		shift
		;;
	-l)
		logo_path="$2"
		shift
		;;
	-h | --help)
		show_help
		exit 0
		;;
	*)
		echo "Opción desconocida: $1"
		show_help
		exit 1
		;;
	esac
	shift
done

# Preguntar interactivamente si no se han proporcionado los parámetros
if [ -z "$technologies" ]; then
	read -p "Introduce la lista de tecnologías (separadas por comas): " technologies
fi

if [ -z "$name_spanish" ]; then
	read -p "Introduce el nombre en español: " name_spanish
fi

if [ -z "$desc_spanish" ]; then
	read -p "Introduce la descripción en español: " desc_spanish
fi

if [ -z "$name_english" ]; then
	read -p "Introduce el nombre en inglés: " name_english
fi

if [ -z "$desc_english" ]; then
	read -p "Introduce la descripción en inglés: " desc_english
fi

if [ -z "$name_chinese" ]; then
	read -p "Introduce el nombre en chino: " name_chinese
fi

if [ -z "$desc_chinese" ]; then
	read -p "Introduce la descripción en chino: " desc_chinese
fi

if [ -z "$logo_path" ]; then
	read -p "Introduce la ruta a la imagen para usar como logo: " logo_path
fi

# Determinar el directorio de father_project
script_dir=$(dirname "$(realpath "$0")")
scaffold_project=$(dirname "$script_dir")
father_project=$(dirname "$scaffold_project")

# Comprobar si father_project es un repositorio git
if [ ! -d "$father_project/.git" ]; then
	echo "El directorio padre ($father_project) no es un repositorio git."
	exit 1
fi

# Cambiar al directorio father_project
cd "$father_project"

# Crear o cambiar a la rama orphan
git checkout --orphan metadata-branch 2>/dev/null || git checkout metadata-branch

# Limpiar el contenido de la rama orphan
git rm -rf . >/dev/null 2>&1

# Crear el archivo metadata.json con el contenido adecuado
cat >metadata.json <<EOL
{
  "technologies": [$(echo "$technologies" | sed 's/,/\", \"/g' | sed 's/^/\"/;s/$/\"/')],
  "lang": {
    "en": {
      "name": "$name_english",
      "desc": "$desc_english"
    },
    "es": {
      "name": "$name_spanish",
      "desc": "$desc_spanish"
    },
    "zh": {
      "name": "$name_chinese",
      "desc": "$desc_chinese"
    }
  }
}
EOL

# Manejar la imagen
if [ -f "$logo_path" ]; then
	# Obtener la extensión del archivo
	ext="${logo_path##*.}"
	ext_lower=$(echo "$ext" | tr '[:upper:]' '[:lower:]')

	if [ "$ext_lower" != "png" ]; then
		# Convertir la imagen a PNG
		convert "$logo_path" logo.png
		# Eliminar el archivo original
		rm "$logo_path"
	else
		# Copiar el archivo directamente si ya es PNG
		cp "$logo_path" logo.png
	fi
fi

# Añadir y commitear el archivo y el logo (si existe)
git add metadata.json
if [ -f "logo.png" ]; then
	git add logo.png
fi
git commit -m "Add metadata.json and logo.png"
git push --set-upstream origin metadata-branch

# Avisar al usuario
echo "Se ha creado la rama orphan 'metadata-branch' con el archivo metadata.json y logo.png (si fue proporcionado)."
